====================================
情報工学科に所属する前後の学習の道筋
====================================
:Author: draftcode
:Date:   2010-08-15
:Slug:   learning_path

自分も現在学習途中であるし，これはこのように勉強しろというようなたいそうなこと
は言えないのですが，どういうことを思って，どういう勉強を進めてきたかということ
を書いてみたいと思います．

計算機プログラムの構造と解釈を読み始めた
========================================

買ったのは浪人をすることに決めたときでした．そこから4月か5月ぐらいまではやって
いたような気がしますが，大して進まずに放置しました．実際に割と進んだのはB2のと
きでした．ちなみに現在も止まったままです．きっと多くの人が有名な本だし読んでお
こうと思いつつも止まっているのではないでしょうか．自分もその一人です．

プログラミング言語Cを読んだ
===========================

読み始めたのはB1の5月からでした．以前にもCの特に有用ではなさそうな本を読みまし
たが，情報工学科を志望しているのだしCぐらいできていてもいいのではないだろうか
ということでこの本だったと思います．この本については演習を含めてだいたい1ヶ月
か2ヶ月ぐらいで読み終えたと思います．

Cを使うアルバイトを始めた
=========================

プログラミング言語Cを読み終えたので，Cを使うアルバイトをはじめました．現在では
そういうバイトは少なくなっているのかもしれないですが，たまたま見つけたのでそこ
に応募しました．現在も一応続けています．

MFCに触れた
===========

アルバイトの研修の最初の方は基本的なCの演習でしたが，後半の方はMFCを使った
Windowsアプリケーションの開発でしたので，MFCに触れることになりました．必然的に
C++も触れることになっています．MFCを使うにあたってリファレンスを参照するので，
MSDNをひいていたりしました．

プログラミング言語C++を読み始めた
=================================

MFCはC++のフレームワークですので，C++の知識が必要になると思い，プログラミング
言語C++を購入しました．この本に関しては評判はイマイチでしたが，言語をデザイン
した人が書いた本だからという理由で購入しました．

この本はまだ途中までしか読んでいないですし，読んだ部分もほぼ覚えていません．と
いうのも，アルバイトの中で実際に使っているのはC++というよりBetter Cでしたの
で，C++の様々な機能(と呼んで差し支えないのかわかりませんが)は(幸か不幸か)あま
り使用することがなかったのです．

同時期にC++のデザインと進化を購入しましたが，まだ読んでいません．

この頃のコード
--------------

C++かぶれになっていたので，STLやテンプレートやクラスを多用するコードでした．前
述の通り，バイト先ではほぼBetter Cでしたので，書いたコードを社員さんにレビュー
してもらうと，(幸か不幸か)反応がイマイチでした．研修の頃は，実際の業務でいじる
コードを見ていないので，なんだろうなぁという感想を抱いていましたが，研修が終わ
り，実際の業務に入ったときにBetter Cのように書いてあるコードをみて，納得がいき
ました．(そして自分は周りにあわせてCっぽくC++を使うようになりました．)

Win32APIに触れた
================

研修ではMFCを使っていたので，Win32APIを直接使うことはありませんでしたが，実業
務ではほぼWin32APIをつかったプログラミングでしたので，MSDNを読みながらプログラ
ムを書くということをやっていました．この時期には古い(Windows95あたり
の)Win32APIについての本がバイト先にありましたので，それをめくりつつOSが提供す
る基本的なサービス，つまりメモリ割り当てやメモリマッピング，スレッド・プロセス
の概念，プロセス間同期について知ることとなりました．

エキスパートCプログラミングを読んだ
===================================

C++が提供する様々な抽象化は，遊ぶ分には楽しいけれども，適切にそれを使用できる
人と一緒ではないと，仕事では使えないという印象を受けたので，C++に関することは
中断し，Cについてより詳しく知ることにしました．実際のところプログラミング言語C
だけではCについての知識は足りないとは思います．

エキスパートCプログラミングは，そのような足りない部分の一部を補ってくれまし
た．特にポインタと配列の違いは，実際のところこの本を読むまで説明できなかったと
思いますし，この本を読むことによって，コードを書くときに意識する視点の一つ，コ
ンパイラは何をどう見るのかという視点を獲得することができました．この視点がない
と，sizeofが展開される値についての正しい判断をすることができませんでした．

Linkers & Loadersを読み始めた
=============================

エキスパートCプログラミングを読んだあと，コンパイラがはき出すオブジェクトコー
ドについての知識が欲しいと思いました．アセンブラについての知識は後で獲得するこ
とになるのですが，コンパイル後のコードについて，リンカやローダが行う作業や，オ
ブジェクトコードそれ自体が含むものがなんなのかということについて知ることになり
ました．

オブジェクトコードが含むものを知ることができたため，コンパイラがどういう視点で
ソースコードを見ているのかということについて，よりよい推測ができるようになりま
した．翻訳単位という概念はエキスパートCプログラミングでもありましたが，
Linkers& Loadersを読むことによって，複数のオブジェクトコード間での参照をすると
きに，どうやって解決しているかということも推測できるようになりました．

エキスパートCプログラミング と Linkers & Loadersの与えた影響
------------------------------------------------------------

上記の二冊は，自分のコーディングに対する姿勢に大きく影響を与えています．どんな
に高級な言語でも，必ずそれは機械語レベルまで落とされるということを強く意識でき
るようになりました．例えば，自分はアルバイトでVBScriptを書くアルバイトを(上記
の仕事とは別に)やっているのですが，そのときもCOMのVariantに意識を落とし，COMが
提供するバイナリ標準についての知識を活用しながら，値渡しと参照渡しが混在する関
数の間を行き来しています．

また，いかに抽象化されたレイヤで動くプログラムだろうと，それは必ず現実の計算機
で実行されているということがはっきりと意識するようになりました．もともと(計算
機科学について学習する上で)最初に選んだ本が計算機プログラムの構造と解釈である
のというのもあるかもしれませんが，Lispのようなかなり抽象化のレベルが高い言語
が，どうやって計算機の上で動くオブジェクトコードに変換されるのか，ということに
関心を寄せるようになりました．

λ計算について知った
===================

Linkers & Loadersと前後して，チューリング機械や再帰的関数，λ計算についての基
本的な知識を得ました．Schemeで出てくるlambdaというものについて知っておきたかっ
たというのもありますし，たまたま大学の授業で計算論の科目があったというのもあり
ます．これらの分野の興味はより進んでいって，サークルで行っている研究室紹介を行
うために，関連した研究室へ取材に行くことになりました．

訪問した研究室はプログラム意味論について研究しているところでしたので，初学者の
自分にはなかなか理解できなかったところもありましたが，なんとか研究室を紹介でき
るレベルまでもっていくことができました．また，この時期には論理学についての基礎
知識も得ることができました．

現在について
============

ここまでが情報工学科3年になるまでにたどった学習の道筋です．現在はコンピュータ
アーキテクチャを学ぶために，パターソン&ヘネシー コンピュータの構成と設計 ハー
ドウエアとソフトウエアのインタフェースを読んでいます．また，アルゴリズムとデー
タ構造について学ぶために，アルゴリズムイントロダクションを読んでいます．

